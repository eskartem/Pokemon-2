{
	"info": {
		"_postman_id": "16ff020e-be9e-4ddf-a4d4-f268f822500c",
		"name": "startBattleMethod",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40065591"
	},
	"item": [
		{
			"name": "BM_001.1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"\r",
							"const login1 = 'test-pochta@mail.ru';\r",
							"const password1 = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"const login2 = 'opp';\r",
							"const password2 = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"function generateHash(login, password) {\r",
							"    const rnd = Math.round(Math.random() * 100000);\r",
							"    const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"    return { rnd, hash };\r",
							"}\r",
							"\r",
							"\r",
							"const { rnd: rnd1, hash: hash1 } = generateHash(login1, password1);\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login1}&hash=${hash1}&rnd=${rnd1}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res1) {\r",
							"    const loginResponse1 = res1.json();\r",
							"    const token1 = loginResponse1.data.token;\r",
							"\r",
							"    pm.globals.set('token1', token1);\r",
							"\r",
							"\r",
							"    const { rnd: rnd2, hash: hash2 } = generateHash(login2, password2);\r",
							"\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: `http://server/api/?login=${login2}&hash=${hash2}&rnd=${rnd2}&method=login`,\r",
							"        method: 'GET'\r",
							"    }, function (err, res2) {\r",
							"        const loginResponse2 = res2.json();\r",
							"        const token2 = loginResponse2.data.token;\r",
							"\r",
							"        pm.globals.set('token2', token2);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Always true\", () => {\r",
							"    pm.expect(true).to.be.true;\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://server/api/?method=startBattle&token1={{token1}}&token2={{token2}}",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "startBattle"
						},
						{
							"key": "token1",
							"value": "{{token1}}"
						},
						{
							"key": "token2",
							"value": "{{token2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BM_001.5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"\r",
							"const login = 'test-pochta@mail.ru';\r",
							"const password = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"const rnd = Math.round(Math.random() * 100000);\r",
							"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"\r",
							"\r",
							"pm.globals.set('rnd', rnd);\r",
							"pm.globals.set('hash', hash);\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login}&hash=${hash}&rnd=${rnd}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res) {\r",
							"    const loginResponse = res.json();\r",
							"\r",
							"\r",
							"    const token = loginResponse.data.token;\r",
							"    pm.globals.set('token', token);\r",
							"\r",
							"   \r",
							"    pm.request.url = pm.request.url.toString().replace(/token=[^&]*/, `token=${token}`);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error for not found\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an(\"object\");\r",
							"    pm.expect(responseJson).to.have.property(\"result\", \"error\");\r",
							"\r",
							"\r",
							"    pm.expect(responseJson).to.have.property(\"error\").that.is.an(\"object\");\r",
							"    const error = responseJson.error;\r",
							"\r",
							"    pm.expect(error).to.have.property(\"code\", 404);\r",
							"    pm.expect(error).to.have.property(\"text\", \"not found\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://server/api/?method=startBattle&token1={{token}}",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "startBattle"
						},
						{
							"key": "token1",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BM_001.4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"const login = 'test-pochta@mail.ru';\r",
							"const password = 'Jsiek1325!';\r",
							"\r",
							"const rnd = Math.round(Math.random() * 100000);\r",
							"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login}&hash=${hash}&rnd=${rnd}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res) {\r",
							"    const loginResponse = res.json();\r",
							"\r",
							"    const token = loginResponse.data ? loginResponse.data.token : null;\r",
							"    \r",
							"    \r",
							"    pm.request.url = pm.request.url.toString().replace(/login=[^&]*/, 'login=INVALID'); \r",
							"\r",
							"    \r",
							"    pm.request.url = pm.request.url.toString().replace(/token=[^&]*/, '');  // Убираем токен\r",
							"\r",
							"    console.log('Ссылка после повреждения:', pm.request.url);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error for User is not found\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an(\"object\");\r",
							"    pm.expect(responseJson).to.have.property(\"result\", \"error\");\r",
							"\r",
							"\r",
							"    pm.expect(responseJson).to.have.property(\"error\").that.is.an(\"object\");\r",
							"    const error = responseJson.error;\r",
							"\r",
							"    pm.expect(error).to.have.property(\"code\", 705);\r",
							"    pm.expect(error).to.have.property(\"text\", \"User is not found\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://server/api/?method=startBattle&token1={{token}}&token2=bbb3c25e58da6532b19de0acb594f6c1",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "startBattle"
						},
						{
							"key": "token1",
							"value": "{{token}}"
						},
						{
							"key": "token2",
							"value": "bbb3c25e58da6532b19de0acb594f6c1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BM_001.4.1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"\r",
							"const login = 'test-pochta@mail.ru';\r",
							"const password = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"const rnd = Math.round(Math.random() * 100000);\r",
							"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"\r",
							"\r",
							"pm.globals.set('rnd', rnd);\r",
							"pm.globals.set('hash', hash);\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login}&hash=${hash}&rnd=${rnd}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res) {\r",
							"    const loginResponse = res.json();\r",
							"\r",
							"\r",
							"    const token = loginResponse.data.token;\r",
							"    pm.globals.set('token', token);\r",
							"\r",
							"   \r",
							"    pm.request.url = pm.request.url.toString().replace(/token=[^&]*/, `token=${token}`);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error for User is not found\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an(\"object\");\r",
							"    pm.expect(responseJson).to.have.property(\"result\", \"error\");\r",
							"\r",
							"\r",
							"    pm.expect(responseJson).to.have.property(\"error\").that.is.an(\"object\");\r",
							"    const error = responseJson.error;\r",
							"\r",
							"    pm.expect(error).to.have.property(\"code\", 705);\r",
							"    pm.expect(error).to.have.property(\"text\", \"User is not found\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://server/api/?method=startBattle&token1={{token}}&token2=bbb3c25e58da6532b19de0acb594f6c",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "startBattle"
						},
						{
							"key": "token1",
							"value": "{{token}}"
						},
						{
							"key": "token2",
							"value": "bbb3c25e58da6532b19de0acb594f6c"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BM_001.2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"\r",
							"const login1 = 'test-pochta@mail.ru';\r",
							"const password1 = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"const login2 = 'opp';\r",
							"const password2 = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"function generateHash(login, password) {\r",
							"    const rnd = Math.round(Math.random() * 100000);\r",
							"    const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"    return { rnd, hash };\r",
							"}\r",
							"\r",
							"\r",
							"const { rnd: rnd1, hash: hash1 } = generateHash(login1, password1);\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login1}&hash=${hash1}&rnd=${rnd1}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res1) {\r",
							"    const loginResponse1 = res1.json();\r",
							"    const token1 = loginResponse1.data.token;\r",
							"\r",
							"    pm.globals.set('token1', token1);\r",
							"\r",
							"\r",
							"    const { rnd: rnd2, hash: hash2 } = generateHash(login2, password2);\r",
							"\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: `http://server/api/?login=${login2}&hash=${hash2}&rnd=${rnd2}&method=login`,\r",
							"        method: 'GET'\r",
							"    }, function (err, res2) {\r",
							"        const loginResponse2 = res2.json();\r",
							"        const token2 = loginResponse2.data.token;\r",
							"\r",
							"        pm.globals.set('token2', token2);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Param method not setted\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an(\"object\");\r",
							"    pm.expect(responseJson).to.have.property(\"result\", \"error\");\r",
							"\r",
							"\r",
							"    pm.expect(responseJson).to.have.property(\"error\").that.is.an(\"object\");\r",
							"    const error = responseJson.error;\r",
							"\r",
							"    pm.expect(error).to.have.property(\"code\", 101);\r",
							"    pm.expect(error).to.have.property(\"text\", \"Param method not setted\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://server/api/?token1={{token}}&token2=bbb3c25e58da6532b19de0acb594f6c1",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "startBattle",
							"disabled": true
						},
						{
							"key": "token1",
							"value": "{{token}}"
						},
						{
							"key": "token2",
							"value": "bbb3c25e58da6532b19de0acb594f6c1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BM_001.3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"\r",
							"const login1 = 'test-pochta@mail.ru';\r",
							"const password1 = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"const login2 = 'opp';\r",
							"const password2 = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"function generateHash(login, password) {\r",
							"    const rnd = Math.round(Math.random() * 100000);\r",
							"    const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"    return { rnd, hash };\r",
							"}\r",
							"\r",
							"\r",
							"const { rnd: rnd1, hash: hash1 } = generateHash(login1, password1);\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login1}&hash=${hash1}&rnd=${rnd1}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res1) {\r",
							"    const loginResponse1 = res1.json();\r",
							"    const token1 = loginResponse1.data.token;\r",
							"\r",
							"    pm.globals.set('token1', token1);\r",
							"\r",
							"\r",
							"    const { rnd: rnd2, hash: hash2 } = generateHash(login2, password2);\r",
							"\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: `http://server/api/?login=${login2}&hash=${hash2}&rnd=${rnd2}&method=login`,\r",
							"        method: 'GET'\r",
							"    }, function (err, res2) {\r",
							"        const loginResponse2 = res2.json();\r",
							"        const token2 = loginResponse2.data.token;\r",
							"\r",
							"        pm.globals.set('token2', token2);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверяем статус ответа\r",
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Method not found\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an(\"object\");\r",
							"    pm.expect(responseJson).to.have.property(\"result\", \"error\");\r",
							"\r",
							"\r",
							"    pm.expect(responseJson).to.have.property(\"error\").that.is.an(\"object\");\r",
							"    const error = responseJson.error;\r",
							"\r",
							"    pm.expect(error).to.have.property(\"code\", 102);\r",
							"    pm.expect(error).to.have.property(\"text\", \"Method not found\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://server/api/?method=startBattley&token1={{token}}&token2=bbb3c25e58da6532b19de0acb594f6c1",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "startBattley"
						},
						{
							"key": "token1",
							"value": "{{token}}"
						},
						{
							"key": "token2",
							"value": "bbb3c25e58da6532b19de0acb594f6c1"
						}
					]
				}
			},
			"response": []
		}
	]
}