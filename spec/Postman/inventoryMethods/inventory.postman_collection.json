{
	"info": {
		"_postman_id": "f07ef635-b962-4b21-9603-0dbe39ba0692",
		"name": "inventory",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40283555"
	},
	"item": [
		{
			"name": "getInventory",
			"item": [
				{
					"name": "BC_061.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.have.property('result');\r",
									"    pm.expect(responseJson.result).to.eql('ok');\r",
									"\r",
									"    pm.expect(responseJson).to.have.property('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.data).to.have.property('monsters');\r",
									"    pm.expect(responseJson.data.monsters).to.be.an('array');\r",
									"    responseJson.data.monsters.forEach((monster, index) => {\r",
									"        pm.expect(monster).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(monster).to.have.property('user_id').that.is.a('number');\r",
									"        pm.expect(monster).to.have.property('monster_type_id').that.is.a('number');\r",
									"        pm.expect(monster).to.have.property('level').that.is.a('number');\r",
									"        pm.expect(monster).to.have.property('hp').that.is.a('number');\r",
									"        pm.expect(monster).to.have.property('status').that.is.a('string');\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.data).to.have.property('monsterTypes');\r",
									"    pm.expect(responseJson.data.monsterTypes).to.be.an('array');\r",
									"    responseJson.data.monsterTypes.forEach((type, index) => {\r",
									"        pm.expect(type).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(type).to.have.property('element_id').that.is.a('number');\r",
									"        pm.expect(type).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(type).to.have.property('hp').that.is.a('number');\r",
									"        pm.expect(type).to.have.property('attack').that.is.a('number');\r",
									"        pm.expect(type).to.have.property('defense').that.is.a('number');\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.data).to.have.property('inventory');\r",
									"    pm.expect(responseJson.data.inventory).to.be.an('array');\r",
									"    responseJson.data.inventory.forEach((item, index) => {\r",
									"        pm.expect(item).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('user_id').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('resource_id').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('resource_amount').that.is.a('number');\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.expect(responseJson.data).to.have.property('balance');\r",
									"    pm.expect(responseJson.data.balance).to.be.an('object');\r",
									"    pm.expect(responseJson.data.balance).to.have.property('money').that.is.a('number');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?method=getInventory&token=c9c55979a9ddc53b50997827668fbdb3",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "getInventory"
								},
								{
									"key": "token",
									"value": "c9c55979a9ddc53b50997827668fbdb3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_061.2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(705);\r",
									"    pm.expect(responseJson.error.text).to.eql('User is not found');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?method=getInventory&token=c9c55979a9ddc53b50997827668f3333",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "getInventory"
								},
								{
									"key": "token",
									"value": "c9c55979a9ddc53b50997827668f3333"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_061.3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(101);\r",
									"    pm.expect(responseJson.error.text).to.eql('Param method not setted');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?=getInventory&token=d84449826c008cd79074d152e51bfb97",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "",
									"value": "getInventory"
								},
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_061.4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(102);\r",
									"    pm.expect(responseJson.error.text).to.eql('Method not found');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?method=getInventor&token=c9c55979a9ddc53b50997827668fbdb3",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "getInventor"
								},
								{
									"key": "token",
									"value": "c9c55979a9ddc53b50997827668fbdb3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "addToTeam",
			"item": [
				{
					"name": "BC_062.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('result');\r",
									"    pm.expect(responseJson.result).to.eql('ok');\r",
									"    pm.expect(responseJson.data).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?method=addToTeam&token=test&monsterId=4",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "addToTeam"
								},
								{
									"key": "token",
									"value": "test"
								},
								{
									"key": "monsterId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_062.2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(705);\r",
									"    pm.expect(responseJson.error.text).to.eql('User is not found');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?method=addToTeam&token=32qwe23wnj32jeqkmk2&monsterId=4",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "addToTeam"
								},
								{
									"key": "token",
									"value": "32qwe23wnj32jeqkmk2"
								},
								{
									"key": "monsterId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_061.3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(101);\r",
									"    pm.expect(responseJson.error.text).to.eql('Param method not setted');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?=addToTeam&token=test&monsterId=4",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "",
									"value": "addToTeam"
								},
								{
									"key": "token",
									"value": "test"
								},
								{
									"key": "monsterId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_061.4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(102);\r",
									"    pm.expect(responseJson.error.text).to.eql('Method not found');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?method=adToTeam&token=test&monsterId=4",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "adToTeam"
								},
								{
									"key": "token",
									"value": "test"
								},
								{
									"key": "monsterId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_061.5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(242);\r",
									"    pm.expect(responseJson.error.text).to.eql('Params not set fully');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?method=addToTeam&token=test",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "addToTeam"
								},
								{
									"key": "token",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_061.6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(242);\r",
									"    pm.expect(responseJson.error.text).to.eql('Params not set fully');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?method=addToTeam&token=1916666aacbb8732bf2d12238b2cd5db&monsterId=44455555",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "addToTeam"
								},
								{
									"key": "token",
									"value": "1916666aacbb8732bf2d12238b2cd5db"
								},
								{
									"key": "monsterId",
									"value": "44455555"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_061.7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(242);\r",
									"    pm.expect(responseJson.error.text).to.eql('Params not set fully');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?method=addToTeam&token=test&monsterId=4",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "addToTeam"
								},
								{
									"key": "token",
									"value": "test"
								},
								{
									"key": "monsterId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_061.8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(1460);\r",
									"    pm.expect(responseJson.error.text).to.eql('monster with that ID has not been found');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?method=addToTeam&token=test&monsterId=2",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "method",
									"value": "addToTeam"
								},
								{
									"key": "token",
									"value": "test"
								},
								{
									"key": "monsterId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "login",
			"value": "petya",
			"type": "string"
		},
		{
			"key": "password",
			"value": "222",
			"type": "string"
		},
		{
			"key": "rnd",
			"value": "",
			"type": "string"
		},
		{
			"key": "hash",
			"value": "",
			"type": "string"
		},
		{
			"key": "rmd",
			"value": ""
		}
	]
}