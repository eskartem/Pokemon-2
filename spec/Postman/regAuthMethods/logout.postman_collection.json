{
	"info": {
		"_postman_id": "08677496-32e1-42c8-9668-ade5d0645f9a",
		"name": "logout",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40065591"
	},
	"item": [
		{
			"name": "MT_006.6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверяем статус ответа\r",
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Always true\", () => {\r",
							"    pm.expect(true).to.be.true;\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"\r",
							"const login = 'test-pochta@mail.ru';\r",
							"const password = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"const rnd = Math.round(Math.random() * 100000);\r",
							"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"\r",
							"\r",
							"pm.globals.set('rnd', rnd);\r",
							"pm.globals.set('hash', hash);\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login}&hash=${hash}&rnd=${rnd}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res) {\r",
							"    const loginResponse = res.json();\r",
							"\r",
							"\r",
							"    const token = loginResponse.data.token;\r",
							"    pm.globals.set('token', token);\r",
							"\r",
							"   \r",
							"    pm.request.url = pm.request.url.toString().replace(/token=[^&]*/, `token=${token}`);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "GET /api/?method=logout&token=014f03ff5ac19fc80913629fdde9e46a HTTP/1.1",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": " */*",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": " gzip, deflate",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": " ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
						"type": "text"
					},
					{
						"key": "Connection",
						"value": " keep-alive",
						"type": "text"
					},
					{
						"key": "Host",
						"value": " server",
						"type": "text"
					},
					{
						"key": "Origin",
						"value": " http://localhost:3000",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": " http://localhost:3000/",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": " Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "method",
							"value": " logout",
							"type": "text"
						},
						{
							"key": "token",
							"value": " 014f03ff5ac19fc80913629fdde9e46a",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://server/api/?method=logout&token={{token}}",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "logout"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MT_006.15",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверяем статус ответа\r",
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Param method not setted\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an(\"object\");\r",
							"    pm.expect(responseJson).to.have.property(\"result\", \"error\");\r",
							"\r",
							"\r",
							"    pm.expect(responseJson).to.have.property(\"error\").that.is.an(\"object\");\r",
							"    const error = responseJson.error;\r",
							"\r",
							"    pm.expect(error).to.have.property(\"code\", 101);\r",
							"    pm.expect(error).to.have.property(\"text\", \"Param method not setted\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"\r",
							"const login = 'test-pochta@mail.ru';\r",
							"const password = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"const rnd = Math.round(Math.random() * 100000);\r",
							"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"\r",
							"\r",
							"pm.globals.set('rnd', rnd);\r",
							"pm.globals.set('hash', hash);\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login}&hash=${hash}&rnd=${rnd}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res) {\r",
							"    const loginResponse = res.json();\r",
							"\r",
							"\r",
							"    const token = loginResponse.data.token;\r",
							"    pm.globals.set('token', token);\r",
							"\r",
							"   \r",
							"    pm.request.url = pm.request.url.toString().replace(/token=[^&]*/, `token=${token}`);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "GET /api/?method=logout&token=014f03ff5ac19fc80913629fdde9e46a HTTP/1.1",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": " */*",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": " gzip, deflate",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": " ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
						"type": "text"
					},
					{
						"key": "Connection",
						"value": " keep-alive",
						"type": "text"
					},
					{
						"key": "Host",
						"value": " server",
						"type": "text"
					},
					{
						"key": "Origin",
						"value": " http://localhost:3000",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": " http://localhost:3000/",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": " Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "method",
							"value": " logout",
							"type": "text"
						},
						{
							"key": "token",
							"value": " 014f03ff5ac19fc80913629fdde9e46a",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://server/api/?token=be7f6b10d8db3de89200c256021af87d",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "logout",
							"disabled": true
						},
						{
							"key": "token",
							"value": "be7f6b10d8db3de89200c256021af87d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MT_006.16",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверяем статус ответа\r",
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Method not found\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an(\"object\");\r",
							"    pm.expect(responseJson).to.have.property(\"result\", \"error\");\r",
							"\r",
							"\r",
							"    pm.expect(responseJson).to.have.property(\"error\").that.is.an(\"object\");\r",
							"    const error = responseJson.error;\r",
							"\r",
							"    pm.expect(error).to.have.property(\"code\", 102);\r",
							"    pm.expect(error).to.have.property(\"text\", \"Method not found\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"\r",
							"const login = 'test-pochta@mail.ru';\r",
							"const password = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"const rnd = Math.round(Math.random() * 100000);\r",
							"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"\r",
							"\r",
							"pm.globals.set('rnd', rnd);\r",
							"pm.globals.set('hash', hash);\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login}&hash=${hash}&rnd=${rnd}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res) {\r",
							"    const loginResponse = res.json();\r",
							"\r",
							"\r",
							"    const token = loginResponse.data.token;\r",
							"    pm.globals.set('token', token);\r",
							"\r",
							"   \r",
							"    pm.request.url = pm.request.url.toString().replace(/token=[^&]*/, `token=${token}`);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "GET /api/?method=logout&token=014f03ff5ac19fc80913629fdde9e46a HTTP/1.1",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": " */*",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": " gzip, deflate",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": " ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
						"type": "text"
					},
					{
						"key": "Connection",
						"value": " keep-alive",
						"type": "text"
					},
					{
						"key": "Host",
						"value": " server",
						"type": "text"
					},
					{
						"key": "Origin",
						"value": " http://localhost:3000",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": " http://localhost:3000/",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": " Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "method",
							"value": " logout",
							"type": "text"
						},
						{
							"key": "token",
							"value": " 014f03ff5ac19fc80913629fdde9e46a",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://server/api/?method=logoute&token=be7f6b10d8db3de89200c256021af87d",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "logoute"
						},
						{
							"key": "token",
							"value": "be7f6b10d8db3de89200c256021af87d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MT_006.13",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверяем статус ответа\r",
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User is not found\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an(\"object\");\r",
							"    pm.expect(responseJson).to.have.property(\"result\", \"error\");\r",
							"\r",
							"\r",
							"    pm.expect(responseJson).to.have.property(\"error\").that.is.an(\"object\");\r",
							"    const error = responseJson.error;\r",
							"\r",
							"    pm.expect(error).to.have.property(\"code\", 705);\r",
							"    pm.expect(error).to.have.property(\"text\", \"User is not found\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"\r",
							"const login = 'test-pochta@mail.ru';\r",
							"const password = 'Jsiek1325!';\r",
							"\r",
							"\r",
							"const rnd = Math.round(Math.random() * 100000);\r",
							"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login}&hash=${hash}&rnd=${rnd}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res) {\r",
							"    const loginResponse = res.json();\r",
							"    const token = loginResponse.data.token;\r",
							"    // Не устанавливаем токен в URL запроса\r",
							"    //pm.request.url = pm.request.url.toString().replace(/token=[^&]*/, `token=${token}`);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "GET /api/?method=logout&token=014f03ff5ac19fc80913629fdde9e46a HTTP/1.1",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": " */*",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": " gzip, deflate",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": " ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
						"type": "text"
					},
					{
						"key": "Connection",
						"value": " keep-alive",
						"type": "text"
					},
					{
						"key": "Host",
						"value": " server",
						"type": "text"
					},
					{
						"key": "Origin",
						"value": " http://localhost:3000",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": " http://localhost:3000/",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": " Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "method",
							"value": " logout",
							"type": "text"
						},
						{
							"key": "token",
							"value": " 014f03ff5ac19fc80913629fdde9e46a",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://server/api/?method=logout&token={{token}}",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "logout"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MT_006.14",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверяем статус ответа\r",
							"pm.test(\"Status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error for Params not set fully\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.be.an(\"object\");\r",
							"    pm.expect(responseJson).to.have.property(\"result\", \"error\");\r",
							"\r",
							"\r",
							"    pm.expect(responseJson).to.have.property(\"error\").that.is.an(\"object\");\r",
							"    const error = responseJson.error;\r",
							"\r",
							"    pm.expect(error).to.have.property(\"code\", 242);\r",
							"    pm.expect(error).to.have.property(\"text\", \"Params not set fully\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"});\r",
							"\r",
							"console.log(\"Response JSON:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const CryptoJS = require('crypto-js');\r",
							"\r",
							"const login = 'test-pochta@mail.ru';\r",
							"const password = 'Jsiek1325!';\r",
							"\r",
							"const rnd = Math.round(Math.random() * 100000);\r",
							"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rnd).toString();\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `http://server/api/?login=${login}&hash=${hash}&rnd=${rnd}&method=login`,\r",
							"    method: 'GET'\r",
							"}, function (err, res) {\r",
							"    const loginResponse = res.json();\r",
							"\r",
							"    const token = loginResponse.data ? loginResponse.data.token : null;\r",
							"    \r",
							"    \r",
							"    pm.request.url = pm.request.url.toString().replace(/login=[^&]*/, 'login=INVALID'); \r",
							"\r",
							"    \r",
							"    pm.request.url = pm.request.url.toString().replace(/token=[^&]*/, '');  // Убираем токен\r",
							"\r",
							"    console.log('Ссылка после повреждения:', pm.request.url);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "GET /api/?method=logout&token=014f03ff5ac19fc80913629fdde9e46a HTTP/1.1",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": " */*",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": " gzip, deflate",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": " ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
						"type": "text"
					},
					{
						"key": "Connection",
						"value": " keep-alive",
						"type": "text"
					},
					{
						"key": "Host",
						"value": " server",
						"type": "text"
					},
					{
						"key": "Origin",
						"value": " http://localhost:3000",
						"type": "text"
					},
					{
						"key": "Referer",
						"value": " http://localhost:3000/",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": " Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "method",
							"value": " logout",
							"type": "text"
						},
						{
							"key": "token",
							"value": " 014f03ff5ac19fc80913629fdde9e46a",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://server/api/?method=logout&token={{token}}",
					"protocol": "http",
					"host": [
						"server"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "method",
							"value": "logout"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		}
	]
}