{
	"info": {
		"_postman_id": "b690dedd-8d2f-4173-bb46-bf9e9addf4a3",
		"name": "chat",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40283555"
	},
	"item": [
		{
			"name": "sendMessage",
			"item": [
				{
					"name": "BC_051.2.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('ok');\r",
									"    pm.expect(responseJson.data).to.eql(true);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?hash={{hash}}&method=sendMessage&token=d84449826c008cd79074d152e51bfb97&message='aaa'",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "hash",
									"value": "{{hash}}"
								},
								{
									"key": "method",
									"value": "sendMessage"
								},
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97"
								},
								{
									"key": "message",
									"value": "'aaa'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_051.2.2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(705);\r",
									"    pm.expect(responseJson.error.text).to.eql('User is not found');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?hash={{hash}}&method=sendMessage&token=20b1f475a1c7adaa69b4b348d0b43333&message='aaa'",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "hash",
									"value": "{{hash}}"
								},
								{
									"key": "method",
									"value": "sendMessage"
								},
								{
									"key": "token",
									"value": "20b1f475a1c7adaa69b4b348d0b43333"
								},
								{
									"key": "message",
									"value": "'aaa'"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "getMessages",
			"item": [
				{
					"name": "BC_051.2.3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('ok');\r",
									"    pm.expect(responseJson.data).to.be.a('object');\r",
									"    \r",
									"    pm.expect(responseJson.data).to.have.property('messages');\r",
									"    pm.expect(responseJson.data.messages).to.be.an('array');\r",
									"\r",
									"    responseJson.data.messages.forEach((message, index) => {\r",
									"        pm.expect(message).to.have.property('author').that.is.a('string');\r",
									"        pm.expect(message).to.have.property('message').that.is.a('string');\r",
									"        pm.expect(message).to.have.property('created').that.is.a('string');\r",
									"\r",
									"        const dateRegex = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;\r",
									"        pm.expect(message.created).to.match(dateRegex, `Message #${index + 1} has invalid date format`);\r",
									"    });\r",
									"\r",
									"    pm.expect(responseJson.data).to.have.property('hash');\r",
									"    pm.expect(responseJson.data.hash).to.be.a('string');\r",
									"    pm.expect(responseJson.data.hash).to.not.be.empty; \r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?hash={{hash}}&method=getMessages&token=d84449826c008cd79074d152e51bfb97",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "hash",
									"value": "{{hash}}"
								},
								{
									"key": "method",
									"value": "getMessages"
								},
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BC_051.2.4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('the error response has all properties', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.result).to.eql('error');\r",
									"    pm.expect(responseJson.error).to.be.a('object');\r",
									"    pm.expect(responseJson.error.code).to.eql(705);\r",
									"    pm.expect(responseJson.error.text).to.eql('User is not found');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const CryptoJS = require('crypto-js');\r",
									"\r",
									"const login = pm.collectionVariables.get('login');\r",
									"const password = pm.collectionVariables.get('password');\r",
									"\r",
									"const rmd = Math.round(Math.random() * 100000);\r",
									"const hash = CryptoJS.MD5(CryptoJS.MD5(login + password).toString() + rmd).toString();\r",
									"\r",
									"pm.collectionVariables.set('rmd', rmd);\r",
									"pm.collectionVariables.set('hash', hash);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d84449826c008cd79074d152e51bfb97",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://server/api/?hash={{hash}}&method=getMessages&token=20b1f475a1c7adaa69b4b348d0b33333",
							"protocol": "http",
							"host": [
								"server"
							],
							"path": [
								"api",
								""
							],
							"query": [
								{
									"key": "hash",
									"value": "{{hash}}"
								},
								{
									"key": "method",
									"value": "getMessages"
								},
								{
									"key": "token",
									"value": "20b1f475a1c7adaa69b4b348d0b33333"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "login",
			"value": "petya",
			"type": "string"
		},
		{
			"key": "password",
			"value": "222",
			"type": "string"
		},
		{
			"key": "rnd",
			"value": "",
			"type": "string"
		},
		{
			"key": "hash",
			"value": "",
			"type": "string"
		},
		{
			"key": "rmd",
			"value": ""
		}
	]
}